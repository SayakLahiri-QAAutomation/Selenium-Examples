//This Test Case is to verify that a new Virtual Card is generated successfully and verify it's details

package paymentGateway;

import org.testng.annotations.Test;
import org.testng.annotations.BeforeMethod;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;

public class TestCase1 {
	public static WebDriver driver = null;
  @Test
  public void Test() {
	  driver.manage().timeouts().implicitlyWait(Utility.IMPLICIT_WAIT, TimeUnit.SECONDS);
	  
	  //Clicking on Generate Card Number
	  driver.findElement(By.xpath("//*[@id='nav']/a[2]")).click();
	  
	  //providing driver control to the next tab
	  for(String handle : driver.getWindowHandles()) {
		  driver.switchTo().window(handle);
		  driver.manage().window().maximize();
	  }
	
	//Fetching Card Number
	  String cardNumber = driver.findElement(By.xpath("//*[@id='three']/div/h4[1]")).getText().substring(14);
	  System.out.println(cardNumber);
			
	  //Fetching CVV Details
	  String cvv = driver.findElement(By.xpath("//*[@id='three']/div/h4[2]")).getText().substring(6);
	  
	  //Fetching Credit Limit
	  String creditLimit = driver.findElement(By.xpath("//*[@id='three']/div/h4[4]/span")).getText().substring(1);
	  
	//Fetching expiry month and year
	  String month = driver.findElement(By.xpath("//*[@id='three']/div/h4[3]")).getText().substring(6,8);
	  System.out.println(month);
						
	  String year = driver.findElement(By.xpath("//*[@id='three']/div/h4[3]")).getText().substring(9);
	  System.out.println(year);
			
	  //Verifying CVV
	  try {
		  Assert.assertEquals(cvv.length(), 3);
		  System.out.println("CVV is of valid length");
	  }
	  
	  catch(Exception exp) {
		  exp.printStackTrace();
		  System.out.println("CVV is of invalid length");
	  }
	  
	  //Verifying Credit Limit
	  try {
		  Assert.assertEquals(creditLimit, "100.00");
		  System.out.println("A valid credit limit of $100.00 has been given");
	  }
	  catch (Exception e) {
		  e.printStackTrace();
		  System.out.println("Invalid credit limit has been given");
	  }
	  
		//Clicking on Cart again
		driver.findElement(By.linkText("Cart")).click();
		
		//Choosing quantity
		Select dlQuantity = new Select(driver.findElement(By.name("quantity")));
		dlQuantity.selectByValue(Utility.QUANTITY_VALUE);
		
		//Clicking on Buy Now
		driver.findElement(By.xpath("//input[@class='button special']")).click();
		
		//Giving Card Details and making Payment
		driver.findElement(By.name("card_nmuber")).sendKeys(cardNumber);
		
		Select dlMonth = new Select(driver.findElement(By.name("month")));
		dlMonth.selectByVisibleText(month);
		
		Select dlYear = new Select(driver.findElement(By.name("year")));
		dlYear.selectByVisibleText(year);
		
		driver.findElement(By.name("cvv_code")).sendKeys(cvv);
		driver.findElement(By.name("submit")).click();
		
		//Print out the Order ID generated
		String orderID = driver.findElement(By.xpath("/html/body[@class='subpage']/section[@id='three']/div[@class='inner']/div[@class='table-wrapper']/table[@class='alt access']/tbody/tr[1]/td[2]/h3/strong")).getText();
		System.out.println("Order ID of the newly generated order is : " + orderID);
		
		//Clicking on Check Credit Card Limit
		driver.findElement(By.linkText("Check Credit Card Limit")).click();
		
		//Giving Credit Card number as input to check status
		driver.findElement(By.xpath("//input[@id='card_nmuber']")).clear();
		driver.findElement(By.xpath("//input[@id='card_nmuber']")).sendKeys(cardNumber);
		driver.findElement(By.xpath("//input[@name='submit']")).click();
		
		//Verifying Card Balance and other details
		String actualBalance = driver.findElement(By.xpath("//*[@id='three']/div/div/h4/span")).getText();
		int exptBl = 100 - 20 * (Integer.valueOf(Utility.QUANTITY_VALUE));
		String expectedBalance = String.valueOf(exptBl);
		
		try {
			Assert.assertEquals(actualBalance, expectedBalance);
			System.out.println("Expected balance is being displayed");
		}
		
		catch(Exception ex) {
			ex.printStackTrace();
			System.out.println("Incorrect balance is being displayed");
		}
  }
  
	  
  @BeforeMethod
  public void beforeMethod() {
	  System.setProperty(Utility.DRIVER,Utility.CHROMEDRIVER_PATH);
	  driver = new ChromeDriver();
	  driver.navigate().to(Utility.URL);
	  driver.manage().window().maximize();
  }

  @AfterMethod
  public void afterMethod() {
	  driver.close();
  }

}
